{"version":3,"file":"static/js/714.0c688416.chunk.js","mappings":"+KAAMA,EAAW,+BACXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SAC2BC,MAAMD,GADjC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,2GA2BA,IAAMC,EAAU,CAAEC,YApBlB,WACI,OAAOV,EAAuB,GAAD,OAAIF,EAAJ,qCAAyCC,KAmB3CY,WAhB/B,SAAoBC,GAChB,OAAOZ,EAAuB,GAAD,OAAIF,EAAJ,+BAAmCc,EAAnC,oBAAoDb,EAApD,gDAeUc,iBAZ3C,SAA0BC,GACtB,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBgB,EAAtB,oBAA0Cf,EAA1C,qBAW4BgB,UAR7D,SAAmBD,GACf,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBgB,EAAtB,4BAAkDf,EAAlD,qBAOuCiB,aAJxE,SAAsBF,GAClB,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBgB,EAAtB,4BAAkDf,EAAlD,6BAKjC,O,2HC3Be,SAASkB,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACNd,EAAAA,EAAAA,iBAAyBS,GAASM,MAAK,SAAAC,GACnCH,EAAUG,EAAIJ,aAEnB,CAACH,EAASG,KAIT,gCACKA,IAAU,iCACP,2BACKA,EAAOK,aACR,wBAAKL,EAAOM,SACZ,uCAAeN,EAAOO,iBACtB,sCACA,uBAAIP,EAAOQ,YACX,oCACA,uBAAIR,EAAOS,OAAOC,MAAMC,WAE5B,4BACI,oDACA,SAAC,KAAD,CAAMC,GAAG,GAAT,mBACA,SAAC,KAAD,CAAMA,GAAG,GAAT,4BAKR,SAAC,KAAD,CAAOC,KAAK,2BAIZ,SAAC,KAAD,CAAOA,KAAK","sources":["services/moviesAPI.js","views/MovieDetailsView.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst KEY = '82d55dcaf5b3d3d74d5dfbfe8a424451';\r\n\r\nasync function fetchWithErrorHandling(url = '') {\r\n    const response = await fetch(url);\r\n    return response.ok\r\n        ? await response.json()\r\n        : Promise.reject(new Error('Not found'));\r\n}\r\n\r\nfunction fetchMovies() {\r\n    return fetchWithErrorHandling(`${BASE_URL}/trending/all/day?api_key=${KEY}`)\r\n}\r\n\r\nfunction fetchMovie(query) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/search/movie?query=${query}&api_key=${KEY}&language=en-US&page=1&include_adult=false`)\r\n}\r\n\r\nfunction fetchMovieDetail(movie_id) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movie_id}?api_key=${KEY}&language=en-US`)\r\n}\r\n\r\nfunction fetchCast(movie_id) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movie_id}/credits?api_key=${KEY}&language=en-US`)\r\n}\r\n\r\nfunction fetchReviews(movie_id) {\r\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${movie_id}/reviews?api_key=${KEY}&language=en-US&page=1`)\r\n}\r\n\r\nconst fetches = { fetchMovies, fetchMovie, fetchMovieDetail, fetchCast, fetchReviews }\r\n\r\nexport default fetches","import { useState, useEffect } from 'react';\r\nimport { useParams, Route, Link } from \"react-router-dom\";\r\n\r\nimport fetches from '../services/moviesAPI';\r\n\r\nexport default function MoviesDetailsView() {\r\n    const { movieId } = useParams();\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetches.fetchMovieDetail(movieId).then(res => {\r\n            setMovies(res.movies)\r\n        });\r\n    }, [movieId, movies])\r\n\r\n\r\n    return (\r\n        <>\r\n            {movies && <>\r\n                <div>\r\n                    {movies.poster_path}\r\n                    <h2>{movies.title}</h2>\r\n                    <p>User score:{movies.vote_average}</p>\r\n                    <h3>Overview</h3>\r\n                    <p>{movies.overview}</p>\r\n                    <h4>Genres</h4>\r\n                    <p>{movies.genres.genre.name}</p>\r\n                </div>\r\n                <div>\r\n                    <h2>Additional information</h2>\r\n                    <Link to=''>Cast</Link>\r\n                    <Link to=''>Reviews</Link>\r\n                </div>\r\n            </>\r\n            }\r\n\r\n            <Route path=\"/movies/:movieId/cast\">\r\n                {/* <CastView /> */}\r\n            </Route>\r\n\r\n            <Route path=\"/movies/:movieId/reviews\">\r\n                {/* <ReviewsView /> */}\r\n            </Route>\r\n        </>\r\n    )\r\n}"],"names":["BASE_URL","KEY","fetchWithErrorHandling","url","fetch","response","ok","json","Promise","reject","Error","fetches","fetchMovies","fetchMovie","query","fetchMovieDetail","movie_id","fetchCast","fetchReviews","MoviesDetailsView","movieId","useParams","useState","movies","setMovies","useEffect","then","res","poster_path","title","vote_average","overview","genres","genre","name","to","path"],"sourceRoot":""}